react渲染机制：
  将jsx代码转成一个个createElement对象,最终形成虚拟dom,再形成真实dom

react更新流程：
  当props或state发生改变时，执行render函数，生成一个新的虚拟dom树。然后通过diff算法比较新旧虚拟dom树的不同，
  最后将不同的地方渲染到真实dom上。

diff算法：
  对于新旧dom树的比较，是同层节点之间相互比较，不会跨节点比较。
  不同的dom节点，产生不同的树结构
  如果节点相同的话，只会比较和改变属性
  默认条件下，在递归dom节点的子元素时，react会同时遍历两个子元素列表，当产生差异时，会生成一个mutation

key:
  例如在li的中间位置插入元素时，不加key的情况下，因为位置的变化，所以后面的元素都得重新修改。
  但是加了key之后，react会根据key来匹配新旧DOM树上的子元素，避免不必要的修改。